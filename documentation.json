{
    "pipes": [
        {
            "name": "SafeHtmlPipe",
            "id": "pipe-SafeHtmlPipe-faf4c4d70fd16ce840de46d6f3e43589aceefa0b04885cb3cf750b194f57f3de082a631a2bf3e7f56053b730375e046375565a64f3e7de07bf4617b2a472c9c6",
            "file": "src/app/pipes/safe-html.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeHtml",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "safeHtml",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n  name: 'safeHtml',\r\n  standalone: true\r\n})\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n\r\n  transform(value: string): SafeHtml {\r\n    return this.sanitizer.bypassSecurityTrustHtml(value);\r\n  }\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "selectedDateStart",
            "id": "interface-selectedDateStart-c6164cf8870c1855986517df7c1da0c9bbbc77ad6b20c588e926e9c39d45707a9dfcbdd895589d98f5a2d9a29bd4c9646c02b865a6123151576fb7dde34910e6",
            "file": "src/app/lib/components/date-picker/components/date-picker-calendar-mobile/date-picker-calendar-mobile.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ButtonComponent } from '../../../button/button.component';\r\n\r\nexport interface selectedDateStart {\r\n  day: number;\r\n  month: number;\r\n  year: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-date-picker-calendar-mobile',\r\n  imports: [CommonModule, ButtonComponent],\r\n  templateUrl: './date-picker-calendar-mobile.component.html',\r\n  styleUrls: ['./date-picker-calendar-mobile.component.scss'],\r\n})\r\nexport class DatePickerCalendarMobileComponent implements OnInit {\r\n  @Input({ required: true }) isRange!: boolean;\r\n  @Input({ required: false }) dateRecibedToInputStart!: string;\r\n  @Input({ required: false }) dateRecibedToInputEnd!: string;\r\n  @Output() dateSelectedStart = new EventEmitter<string>();\r\n  @Output() dateSelectedEnd = new EventEmitter<string>();\r\n  @Output() calendarClosed = new EventEmitter<void>(); // Emite un evento cuando se cierra el calendario\r\n  days: string[] = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  day: number = 0;\r\n  month: number = 0;\r\n  year: number = 0;\r\n  currentMonthStart: string = '';\r\n  selectedDateStart: { day: number; month: number; year: number } | null = null;\r\n  selectedDateEnd: { day: number; month: number; year: number } | null = null;\r\n\r\n  dates: (number | null)[] = []; // Usaremos null para los días vacíos\r\n  datesSecondMonth: (number | null)[] = []; // Usaremos null para los días vacíos\r\n  firstDayOfMonth: number | undefined; // El día de la semana en que comienza el mes\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    this.initializeDate();\r\n    this.generateCalendar();\r\n  }\r\n\r\n  // Función para inicializar la fecha\r\n  private initializeDate(): void {\r\n    const currentDate = new Date();\r\n    let formattedDate = '';\r\n    if (this.dateRecibedToInputStart.length == 10) {\r\n      formattedDate = this.dateRecibedToInputStart;\r\n    } else {\r\n      formattedDate = this.formatDate(currentDate);\r\n    }\r\n\r\n    const [dayString, monthString, yearString] = this.splitDate(formattedDate);\r\n\r\n    this.day = parseInt(dayString, 10);\r\n    this.month = parseInt(monthString, 10);\r\n    this.year = parseInt(yearString, 10);\r\n\r\n    if (this.dateRecibedToInputStart.length == 10) {\r\n      this.selectedDateStart = {\r\n        day: this.day,\r\n        month: this.month,\r\n        year: this.year,\r\n      };\r\n    }\r\n  }\r\n\r\n  // Función para formatear la fecha en 'es-ES'\r\n  private formatDate(date: Date): string {\r\n\r\n    const formattedDate = date.toLocaleDateString('es-ES', {\r\n      day: '2-digit',\r\n      month: '2-digit',\r\n      year: 'numeric',\r\n    });\r\n    return formattedDate\r\n  }\r\n\r\n  // Función para dividir la fecha en partes (día, mes, año)\r\n  private splitDate(formattedDate: string): string[] {\r\n    return formattedDate.split('/');\r\n  }\r\n\r\n  generateCalendar(): void {\r\n    this.currentMonthStart = this.getMonthName(this.month);\r\n\r\n    const dateComplete = new Date(this.year, this.month - 1, 1); // Crear un objeto Date con el mes actual\r\n\r\n    dateComplete.setDate(1); // Ponemos la fecha al primer día del mes\r\n    this.firstDayOfMonth = dateComplete.getDay(); // Obtener el día de la semana del primer día (0=Domingo, 1=Lunes, ..., 6=Sábado)\r\n    const daysInMonth = new Date(this.year, this.month, 0).getDate(); // Obtener el número de días del mes\r\n\r\n    // Rellenamos el calendario con los días\r\n    this.dates = [];\r\n    this.datesSecondMonth = [];\r\n    for (let i = 0; i < this.firstDayOfMonth; i++) {\r\n      this.dates.push(null); // Agregamos null para los espacios vacíos\r\n    }\r\n    for (let day = 1; day <= daysInMonth; day++) {\r\n      this.dates.push(day); // Agregamos los días del mes\r\n    }\r\n\r\n  }\r\n\r\n  selectDate(date: number | null, type: string): void {\r\n    if (date == null) return;\r\n    if (type == 'start') {\r\n      this.selectedDateStart = {\r\n        day: date,\r\n        month: this.month,\r\n        year: this.year,\r\n      };\r\n      const formattedDay = this.selectedDateStart.day < 10 ? `0${this.selectedDateStart.day}` : `${this.selectedDateStart.day}`;\r\n      const formattedMonth = this.selectedDateStart.month < 10 ? `0${this.selectedDateStart.month}` : `${this.selectedDateStart.month}`;\r\n      this.dateSelectedStart.emit(`${formattedDay}/${formattedMonth}/${this.selectedDateStart.year}`);\r\n    } else {\r\n      this.selectedDateEnd = {\r\n        day: date,\r\n        month: this.month,\r\n        year: this.year,\r\n      };\r\n      const formattedDay = this.selectedDateEnd.day < 10 ? `0${this.selectedDateEnd.day}` : `${this.selectedDateEnd.day}`;\r\n      const formattedMonth = this.selectedDateEnd.month < 10 ? `0${this.selectedDateEnd.month}` : `${this.selectedDateEnd.month}`;\r\n      this.dateSelectedEnd.emit(`${formattedDay}/${formattedMonth}/${this.selectedDateEnd.year}`);\r\n    }\r\n\r\n  }\r\n\r\n  goToPreviousMonth(): void {\r\n    if (this.month === 1) {\r\n      this.month = 12;\r\n      this.year -= 1;\r\n    } else {\r\n      this.month -= 1;\r\n    }\r\n    this.currentMonthStart = this.getMonthName(this.month);\r\n    this.generateCalendar();\r\n  }\r\n\r\n  goToNextMonth(): void {\r\n    if (this.month === 12) {\r\n      this.month = 1;\r\n      this.year += 1;\r\n    } else {\r\n      this.month += 1;\r\n    }\r\n    this.currentMonthStart = this.getMonthName(this.month);\r\n    this.generateCalendar();\r\n  }\r\n\r\n  getMonthName(month: number): string {\r\n    const months = [\r\n      'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',\r\n      'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'\r\n    ];\r\n    return months[month - 1];\r\n  }\r\n\r\n  hideCalendar(): void {\r\n    this.calendarClosed.emit(); // Emitimos el evento para cerrar el calendario\r\n  }\r\n\r\n  buttonClicked(): void {\r\n    this.hideCalendar();\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "day",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "IconService",
            "id": "injectable-IconService-b2f7a51eaaf4249817634acfa9990b32d6bccd20bfb7d5595fa5cda93a12f157c4741e0b9134a4ee262563227bf9a5c587d655e271d33d7f34404c2d65080e34",
            "file": "src/app/services/icon.service.ts",
            "properties": [
                {
                    "name": "iconsUrl",
                    "defaultValue": "'assets/icons/arrows.json'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getIcon",
                    "args": [
                        {
                            "name": "iconName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "iconName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map, Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class IconService {\r\n  private iconsUrl = 'assets/icons/arrows.json'; // Ruta a tu archivo JSON\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Método para obtener el SVG de un ícono\r\n  getIcon(iconName: string): Observable<string> {\r\n    return this.http.get<{ [key: string]: string }>(this.iconsUrl).pipe(\r\n      map(icons => {\r\n        const svg = icons[iconName];\r\n        return svg || '';\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-caf6629fa1bcd49a321506ccf21bfc4de4b9558d95339debedcb43f1ea1f5214ebc638a1b3a4d99d6f360c15c78cbb04734dd77ecb3f442f3af1d7662bfba82d",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'storybookAngular'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  imports: [RouterOutlet],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.scss'\r\n})\r\nexport class AppComponent {\r\n  title = 'storybookAngular';\r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * The content below * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * Delete the template below * * * * * * * * * -->\r\n<!-- * * * * * * * to get started with your project! * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n\r\n<style>\r\n  :host {\r\n    --bright-blue: oklch(51.01% 0.274 263.83);\r\n    --electric-violet: oklch(53.18% 0.28 296.97);\r\n    --french-violet: oklch(47.66% 0.246 305.88);\r\n    --vivid-pink: oklch(69.02% 0.277 332.77);\r\n    --hot-red: oklch(61.42% 0.238 15.34);\r\n    --orange-red: oklch(63.32% 0.24 31.68);\r\n\r\n    --gray-900: oklch(19.37% 0.006 300.98);\r\n    --gray-700: oklch(36.98% 0.014 302.71);\r\n    --gray-400: oklch(70.9% 0.015 304.04);\r\n\r\n    --red-to-pink-to-purple-vertical-gradient: linear-gradient(\r\n      180deg,\r\n      var(--orange-red) 0%,\r\n      var(--vivid-pink) 50%,\r\n      var(--electric-violet) 100%\r\n    );\r\n\r\n    --red-to-pink-to-purple-horizontal-gradient: linear-gradient(\r\n      90deg,\r\n      var(--orange-red) 0%,\r\n      var(--vivid-pink) 50%,\r\n      var(--electric-violet) 100%\r\n    );\r\n\r\n    --pill-accent: var(--bright-blue);\r\n\r\n    font-family: \"Inter\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\r\n      Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\",\r\n      \"Segoe UI Symbol\";\r\n    box-sizing: border-box;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n\r\n  h1 {\r\n    font-size: 3.125rem;\r\n    color: var(--gray-900);\r\n    font-weight: 500;\r\n    line-height: 100%;\r\n    letter-spacing: -0.125rem;\r\n    margin: 0;\r\n    font-family: \"Inter Tight\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\r\n      Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\",\r\n      \"Segoe UI Symbol\";\r\n  }\r\n\r\n  p {\r\n    margin: 0;\r\n    color: var(--gray-700);\r\n  }\r\n\r\n  main {\r\n    width: 100%;\r\n    min-height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 1rem;\r\n    box-sizing: inherit;\r\n    position: relative;\r\n  }\r\n\r\n  .angular-logo {\r\n    max-width: 9.2rem;\r\n  }\r\n\r\n  .content {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    width: 100%;\r\n    max-width: 700px;\r\n    margin-bottom: 3rem;\r\n  }\r\n\r\n  .content h1 {\r\n    margin-top: 1.75rem;\r\n  }\r\n\r\n  .content p {\r\n    margin-top: 1.5rem;\r\n  }\r\n\r\n  .divider {\r\n    width: 1px;\r\n    background: var(--red-to-pink-to-purple-vertical-gradient);\r\n    margin-inline: 0.5rem;\r\n  }\r\n\r\n  .pill-group {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: start;\r\n    flex-wrap: wrap;\r\n    gap: 1.25rem;\r\n  }\r\n\r\n  .pill {\r\n    display: flex;\r\n    align-items: center;\r\n    --pill-accent: var(--bright-blue);\r\n    background: color-mix(in srgb, var(--pill-accent) 5%, transparent);\r\n    color: var(--pill-accent);\r\n    padding-inline: 0.75rem;\r\n    padding-block: 0.375rem;\r\n    border-radius: 2.75rem;\r\n    border: 0;\r\n    transition: background 0.3s ease;\r\n    font-family: var(--inter-font);\r\n    font-size: 0.875rem;\r\n    font-style: normal;\r\n    font-weight: 500;\r\n    line-height: 1.4rem;\r\n    letter-spacing: -0.00875rem;\r\n    text-decoration: none;\r\n  }\r\n\r\n  .pill:hover {\r\n    background: color-mix(in srgb, var(--pill-accent) 15%, transparent);\r\n  }\r\n\r\n  .pill-group .pill:nth-child(6n + 1) {\r\n    --pill-accent: var(--bright-blue);\r\n  }\r\n  .pill-group .pill:nth-child(6n + 2) {\r\n    --pill-accent: var(--french-violet);\r\n  }\r\n  .pill-group .pill:nth-child(6n + 3),\r\n  .pill-group .pill:nth-child(6n + 4),\r\n  .pill-group .pill:nth-child(6n + 5) {\r\n    --pill-accent: var(--hot-red);\r\n  }\r\n\r\n  .pill-group svg {\r\n    margin-inline-start: 0.25rem;\r\n  }\r\n\r\n  .social-links {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.73rem;\r\n    margin-top: 1.5rem;\r\n  }\r\n\r\n  .social-links path {\r\n    transition: fill 0.3s ease;\r\n    fill: var(--gray-400);\r\n  }\r\n\r\n  .social-links a:hover svg path {\r\n    fill: var(--gray-900);\r\n  }\r\n\r\n  @media screen and (max-width: 650px) {\r\n    .content {\r\n      flex-direction: column;\r\n      width: max-content;\r\n    }\r\n\r\n    .divider {\r\n      height: 1px;\r\n      width: 100%;\r\n      background: var(--red-to-pink-to-purple-horizontal-gradient);\r\n      margin-block: 1.5rem;\r\n    }\r\n  }\r\n</style>\r\n\r\n<main class=\"main\">\r\n  <div class=\"content\">\r\n    <div class=\"left-side\">\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 982 239\"\r\n        fill=\"none\"\r\n        class=\"angular-logo\"\r\n      >\r\n        <g clip-path=\"url(#a)\">\r\n          <path\r\n            fill=\"url(#b)\"\r\n            d=\"M388.676 191.625h30.849L363.31 31.828h-35.758l-56.215 159.797h30.848l13.174-39.356h60.061l13.256 39.356Zm-65.461-62.675 21.602-64.311h1.227l21.602 64.311h-44.431Zm126.831-7.527v70.202h-28.23V71.839h27.002v20.374h1.392c2.782-6.71 7.2-12.028 13.255-15.956 6.056-3.927 13.584-5.89 22.503-5.89 8.264 0 15.465 1.8 21.684 5.318 6.137 3.518 10.964 8.673 14.319 15.382 3.437 6.71 5.074 14.81 4.992 24.383v76.175h-28.23v-71.92c0-8.019-2.046-14.237-6.219-18.819-4.173-4.5-9.819-6.791-17.102-6.791-4.91 0-9.328 1.063-13.174 3.272-3.846 2.128-6.792 5.237-9.001 9.328-2.046 4.009-3.191 8.918-3.191 14.728ZM589.233 239c-10.147 0-18.82-1.391-26.103-4.091-7.282-2.7-13.092-6.382-17.511-10.964-4.418-4.582-7.528-9.655-9.164-15.219l25.448-6.136c1.145 2.372 2.782 4.663 4.991 6.954 2.209 2.291 5.155 4.255 8.837 5.81 3.683 1.554 8.428 2.291 14.074 2.291 8.019 0 14.647-1.964 19.884-5.81 5.237-3.845 7.856-10.227 7.856-19.064v-22.665h-1.391c-1.473 2.946-3.601 5.892-6.383 9.001-2.782 3.109-6.464 5.645-10.965 7.691-4.582 2.046-10.228 3.109-17.101 3.109-9.165 0-17.511-2.209-25.039-6.545-7.446-4.337-13.42-10.883-17.757-19.474-4.418-8.673-6.628-19.473-6.628-32.565 0-13.091 2.21-24.301 6.628-33.383 4.419-9.082 10.311-15.955 17.839-20.7 7.528-4.746 15.874-7.037 25.039-7.037 7.037 0 12.846 1.145 17.347 3.518 4.582 2.373 8.182 5.236 10.883 8.51 2.7 3.272 4.746 6.382 6.137 9.327h1.554v-19.8h27.821v121.749c0 10.228-2.454 18.737-7.364 25.447-4.91 6.709-11.538 11.7-20.048 15.055-8.509 3.355-18.165 4.991-28.884 4.991Zm.245-71.266c5.974 0 11.047-1.473 15.302-4.337 4.173-2.945 7.446-7.118 9.573-12.519 2.21-5.482 3.274-12.027 3.274-19.637 0-7.609-1.064-14.155-3.274-19.8-2.127-5.646-5.318-10.064-9.491-13.255-4.174-3.11-9.329-4.746-15.384-4.746s-11.537 1.636-15.792 4.91c-4.173 3.272-7.365 7.772-9.492 13.418-2.128 5.727-3.191 12.191-3.191 19.392 0 7.2 1.063 13.745 3.273 19.228 2.127 5.482 5.318 9.736 9.573 12.764 4.174 3.027 9.41 4.582 15.629 4.582Zm141.56-26.51V71.839h28.23v119.786h-27.412v-21.273h-1.227c-2.7 6.709-7.119 12.191-13.338 16.446-6.137 4.255-13.747 6.382-22.748 6.382-7.855 0-14.81-1.718-20.783-5.237-5.974-3.518-10.72-8.591-14.075-15.382-3.355-6.709-5.073-14.891-5.073-24.464V71.839h28.312v71.921c0 7.609 2.046 13.664 6.219 18.083 4.173 4.5 9.655 6.709 16.365 6.709 4.173 0 8.183-.982 12.111-3.028 3.927-2.045 7.118-5.072 9.655-9.082 2.537-4.091 3.764-9.164 3.764-15.218Zm65.707-109.395v159.796h-28.23V31.828h28.23Zm44.841 162.169c-7.61 0-14.402-1.391-20.457-4.091-6.055-2.7-10.883-6.791-14.32-12.109-3.518-5.319-5.237-11.946-5.237-19.801 0-6.791 1.228-12.355 3.765-16.773 2.536-4.419 5.891-7.937 10.228-10.637 4.337-2.618 9.164-4.664 14.647-6.055 5.4-1.391 11.046-2.373 16.856-3.027 7.037-.737 12.683-1.391 17.102-1.964 4.337-.573 7.528-1.555 9.574-2.782 1.963-1.309 3.027-3.273 3.027-5.973v-.491c0-5.891-1.718-10.391-5.237-13.664-3.518-3.191-8.51-4.828-15.056-4.828-6.955 0-12.356 1.473-16.447 4.5-4.009 3.028-6.71 6.546-8.183 10.719l-26.348-3.764c2.046-7.282 5.483-13.336 10.31-18.328 4.746-4.909 10.638-8.59 17.511-11.045 6.955-2.455 14.565-3.682 22.912-3.682 5.809 0 11.537.654 17.265 2.045s10.965 3.6 15.711 6.71c4.746 3.109 8.51 7.282 11.455 12.6 2.864 5.318 4.337 11.946 4.337 19.883v80.184h-27.166v-16.446h-.9c-1.719 3.355-4.092 6.464-7.201 9.328-3.109 2.864-6.955 5.237-11.619 6.955-4.828 1.718-10.229 2.536-16.529 2.536Zm7.364-20.701c5.646 0 10.556-1.145 14.729-3.354 4.173-2.291 7.364-5.237 9.655-9.001 2.292-3.763 3.355-7.854 3.355-12.273v-14.155c-.9.737-2.373 1.391-4.5 2.046-2.128.654-4.419 1.145-7.037 1.636-2.619.491-5.155.9-7.692 1.227-2.537.328-4.746.655-6.628.901-4.173.572-8.019 1.472-11.292 2.781-3.355 1.31-5.973 3.11-7.855 5.401-1.964 2.291-2.864 5.318-2.864 8.918 0 5.237 1.882 9.164 5.728 11.782 3.682 2.782 8.51 4.091 14.401 4.091Zm64.643 18.328V71.839h27.412v19.965h1.227c2.21-6.955 5.974-12.274 11.292-16.038 5.319-3.763 11.456-5.645 18.329-5.645 1.555 0 3.355.082 5.237.163 1.964.164 3.601.328 4.91.573v25.938c-1.227-.41-3.109-.819-5.646-1.146a58.814 58.814 0 0 0-7.446-.49c-5.155 0-9.738 1.145-13.829 3.354-4.091 2.209-7.282 5.236-9.655 9.164-2.373 3.927-3.519 8.427-3.519 13.5v70.448h-28.312ZM222.077 39.192l-8.019 125.923L137.387 0l84.69 39.192Zm-53.105 162.825-57.933 33.056-57.934-33.056 11.783-28.556h92.301l11.783 28.556ZM111.039 62.675l30.357 73.803H80.681l30.358-73.803ZM7.937 165.115 0 39.192 84.69 0 7.937 165.115Z\"\r\n          />\r\n          <path\r\n            fill=\"url(#c)\"\r\n            d=\"M388.676 191.625h30.849L363.31 31.828h-35.758l-56.215 159.797h30.848l13.174-39.356h60.061l13.256 39.356Zm-65.461-62.675 21.602-64.311h1.227l21.602 64.311h-44.431Zm126.831-7.527v70.202h-28.23V71.839h27.002v20.374h1.392c2.782-6.71 7.2-12.028 13.255-15.956 6.056-3.927 13.584-5.89 22.503-5.89 8.264 0 15.465 1.8 21.684 5.318 6.137 3.518 10.964 8.673 14.319 15.382 3.437 6.71 5.074 14.81 4.992 24.383v76.175h-28.23v-71.92c0-8.019-2.046-14.237-6.219-18.819-4.173-4.5-9.819-6.791-17.102-6.791-4.91 0-9.328 1.063-13.174 3.272-3.846 2.128-6.792 5.237-9.001 9.328-2.046 4.009-3.191 8.918-3.191 14.728ZM589.233 239c-10.147 0-18.82-1.391-26.103-4.091-7.282-2.7-13.092-6.382-17.511-10.964-4.418-4.582-7.528-9.655-9.164-15.219l25.448-6.136c1.145 2.372 2.782 4.663 4.991 6.954 2.209 2.291 5.155 4.255 8.837 5.81 3.683 1.554 8.428 2.291 14.074 2.291 8.019 0 14.647-1.964 19.884-5.81 5.237-3.845 7.856-10.227 7.856-19.064v-22.665h-1.391c-1.473 2.946-3.601 5.892-6.383 9.001-2.782 3.109-6.464 5.645-10.965 7.691-4.582 2.046-10.228 3.109-17.101 3.109-9.165 0-17.511-2.209-25.039-6.545-7.446-4.337-13.42-10.883-17.757-19.474-4.418-8.673-6.628-19.473-6.628-32.565 0-13.091 2.21-24.301 6.628-33.383 4.419-9.082 10.311-15.955 17.839-20.7 7.528-4.746 15.874-7.037 25.039-7.037 7.037 0 12.846 1.145 17.347 3.518 4.582 2.373 8.182 5.236 10.883 8.51 2.7 3.272 4.746 6.382 6.137 9.327h1.554v-19.8h27.821v121.749c0 10.228-2.454 18.737-7.364 25.447-4.91 6.709-11.538 11.7-20.048 15.055-8.509 3.355-18.165 4.991-28.884 4.991Zm.245-71.266c5.974 0 11.047-1.473 15.302-4.337 4.173-2.945 7.446-7.118 9.573-12.519 2.21-5.482 3.274-12.027 3.274-19.637 0-7.609-1.064-14.155-3.274-19.8-2.127-5.646-5.318-10.064-9.491-13.255-4.174-3.11-9.329-4.746-15.384-4.746s-11.537 1.636-15.792 4.91c-4.173 3.272-7.365 7.772-9.492 13.418-2.128 5.727-3.191 12.191-3.191 19.392 0 7.2 1.063 13.745 3.273 19.228 2.127 5.482 5.318 9.736 9.573 12.764 4.174 3.027 9.41 4.582 15.629 4.582Zm141.56-26.51V71.839h28.23v119.786h-27.412v-21.273h-1.227c-2.7 6.709-7.119 12.191-13.338 16.446-6.137 4.255-13.747 6.382-22.748 6.382-7.855 0-14.81-1.718-20.783-5.237-5.974-3.518-10.72-8.591-14.075-15.382-3.355-6.709-5.073-14.891-5.073-24.464V71.839h28.312v71.921c0 7.609 2.046 13.664 6.219 18.083 4.173 4.5 9.655 6.709 16.365 6.709 4.173 0 8.183-.982 12.111-3.028 3.927-2.045 7.118-5.072 9.655-9.082 2.537-4.091 3.764-9.164 3.764-15.218Zm65.707-109.395v159.796h-28.23V31.828h28.23Zm44.841 162.169c-7.61 0-14.402-1.391-20.457-4.091-6.055-2.7-10.883-6.791-14.32-12.109-3.518-5.319-5.237-11.946-5.237-19.801 0-6.791 1.228-12.355 3.765-16.773 2.536-4.419 5.891-7.937 10.228-10.637 4.337-2.618 9.164-4.664 14.647-6.055 5.4-1.391 11.046-2.373 16.856-3.027 7.037-.737 12.683-1.391 17.102-1.964 4.337-.573 7.528-1.555 9.574-2.782 1.963-1.309 3.027-3.273 3.027-5.973v-.491c0-5.891-1.718-10.391-5.237-13.664-3.518-3.191-8.51-4.828-15.056-4.828-6.955 0-12.356 1.473-16.447 4.5-4.009 3.028-6.71 6.546-8.183 10.719l-26.348-3.764c2.046-7.282 5.483-13.336 10.31-18.328 4.746-4.909 10.638-8.59 17.511-11.045 6.955-2.455 14.565-3.682 22.912-3.682 5.809 0 11.537.654 17.265 2.045s10.965 3.6 15.711 6.71c4.746 3.109 8.51 7.282 11.455 12.6 2.864 5.318 4.337 11.946 4.337 19.883v80.184h-27.166v-16.446h-.9c-1.719 3.355-4.092 6.464-7.201 9.328-3.109 2.864-6.955 5.237-11.619 6.955-4.828 1.718-10.229 2.536-16.529 2.536Zm7.364-20.701c5.646 0 10.556-1.145 14.729-3.354 4.173-2.291 7.364-5.237 9.655-9.001 2.292-3.763 3.355-7.854 3.355-12.273v-14.155c-.9.737-2.373 1.391-4.5 2.046-2.128.654-4.419 1.145-7.037 1.636-2.619.491-5.155.9-7.692 1.227-2.537.328-4.746.655-6.628.901-4.173.572-8.019 1.472-11.292 2.781-3.355 1.31-5.973 3.11-7.855 5.401-1.964 2.291-2.864 5.318-2.864 8.918 0 5.237 1.882 9.164 5.728 11.782 3.682 2.782 8.51 4.091 14.401 4.091Zm64.643 18.328V71.839h27.412v19.965h1.227c2.21-6.955 5.974-12.274 11.292-16.038 5.319-3.763 11.456-5.645 18.329-5.645 1.555 0 3.355.082 5.237.163 1.964.164 3.601.328 4.91.573v25.938c-1.227-.41-3.109-.819-5.646-1.146a58.814 58.814 0 0 0-7.446-.49c-5.155 0-9.738 1.145-13.829 3.354-4.091 2.209-7.282 5.236-9.655 9.164-2.373 3.927-3.519 8.427-3.519 13.5v70.448h-28.312ZM222.077 39.192l-8.019 125.923L137.387 0l84.69 39.192Zm-53.105 162.825-57.933 33.056-57.934-33.056 11.783-28.556h92.301l11.783 28.556ZM111.039 62.675l30.357 73.803H80.681l30.358-73.803ZM7.937 165.115 0 39.192 84.69 0 7.937 165.115Z\"\r\n          />\r\n        </g>\r\n        <defs>\r\n          <radialGradient\r\n            id=\"c\"\r\n            cx=\"0\"\r\n            cy=\"0\"\r\n            r=\"1\"\r\n            gradientTransform=\"rotate(118.122 171.182 60.81) scale(205.794)\"\r\n            gradientUnits=\"userSpaceOnUse\"\r\n          >\r\n            <stop stop-color=\"#FF41F8\" />\r\n            <stop offset=\".707\" stop-color=\"#FF41F8\" stop-opacity=\".5\" />\r\n            <stop offset=\"1\" stop-color=\"#FF41F8\" stop-opacity=\"0\" />\r\n          </radialGradient>\r\n          <linearGradient\r\n            id=\"b\"\r\n            x1=\"0\"\r\n            x2=\"982\"\r\n            y1=\"192\"\r\n            y2=\"192\"\r\n            gradientUnits=\"userSpaceOnUse\"\r\n          >\r\n            <stop stop-color=\"#F0060B\" />\r\n            <stop offset=\"0\" stop-color=\"#F0070C\" />\r\n            <stop offset=\".526\" stop-color=\"#CC26D5\" />\r\n            <stop offset=\"1\" stop-color=\"#7702FF\" />\r\n          </linearGradient>\r\n          <clipPath id=\"a\"><path fill=\"#fff\" d=\"M0 0h982v239H0z\" /></clipPath>\r\n        </defs>\r\n      </svg>\r\n      <h1>Hello, {{ title }}</h1>\r\n      <p>Congratulations! Your app is running. 🎉</p>\r\n    </div>\r\n    <div class=\"divider\" role=\"separator\" aria-label=\"Divider\"></div>\r\n    <div class=\"right-side\">\r\n      <div class=\"pill-group\">\r\n        @for (item of [\r\n          { title: 'Explore the Docs', link: 'https://angular.dev' },\r\n          { title: 'Learn with Tutorials', link: 'https://angular.dev/tutorials' },\r\n          { title: 'CLI Docs', link: 'https://angular.dev/tools/cli' },\r\n          { title: 'Angular Language Service', link: 'https://angular.dev/tools/language-service' },\r\n          { title: 'Angular DevTools', link: 'https://angular.dev/tools/devtools' },\r\n        ]; track item.title) {\r\n          <a\r\n            class=\"pill\"\r\n            [href]=\"item.link\"\r\n            target=\"_blank\"\r\n            rel=\"noopener\"\r\n          >\r\n            <span>{{ item.title }}</span>\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              height=\"14\"\r\n              viewBox=\"0 -960 960 960\"\r\n              width=\"14\"\r\n              fill=\"currentColor\"\r\n            >\r\n              <path\r\n                d=\"M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h280v80H200v560h560v-280h80v280q0 33-23.5 56.5T760-120H200Zm188-212-56-56 372-372H560v-80h280v280h-80v-144L388-332Z\"\r\n              />\r\n            </svg>\r\n          </a>\r\n        }\r\n      </div>\r\n      <div class=\"social-links\">\r\n        <a\r\n          href=\"https://github.com/angular/angular\"\r\n          aria-label=\"Github\"\r\n          target=\"_blank\"\r\n          rel=\"noopener\"\r\n        >\r\n          <svg\r\n            width=\"25\"\r\n            height=\"24\"\r\n            viewBox=\"0 0 25 24\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            alt=\"Github\"\r\n          >\r\n            <path\r\n              d=\"M12.3047 0C5.50634 0 0 5.50942 0 12.3047C0 17.7423 3.52529 22.3535 8.41332 23.9787C9.02856 24.0946 9.25414 23.7142 9.25414 23.3871C9.25414 23.0949 9.24389 22.3207 9.23876 21.2953C5.81601 22.0377 5.09414 19.6444 5.09414 19.6444C4.53427 18.2243 3.72524 17.8449 3.72524 17.8449C2.61064 17.082 3.81137 17.0973 3.81137 17.0973C5.04697 17.1835 5.69604 18.3647 5.69604 18.3647C6.79321 20.2463 8.57636 19.7029 9.27978 19.3881C9.39052 18.5924 9.70736 18.0499 10.0591 17.7423C7.32641 17.4347 4.45429 16.3765 4.45429 11.6618C4.45429 10.3185 4.9311 9.22133 5.72065 8.36C5.58222 8.04931 5.16694 6.79833 5.82831 5.10337C5.82831 5.10337 6.85883 4.77319 9.2121 6.36459C10.1965 6.09082 11.2424 5.95546 12.2883 5.94931C13.3342 5.95546 14.3801 6.09082 15.3644 6.36459C17.7023 4.77319 18.7328 5.10337 18.7328 5.10337C19.3942 6.79833 18.9789 8.04931 18.8559 8.36C19.6403 9.22133 20.1171 10.3185 20.1171 11.6618C20.1171 16.3888 17.2409 17.4296 14.5031 17.7321C14.9338 18.1012 15.3337 18.8559 15.3337 20.0084C15.3337 21.6552 15.3183 22.978 15.3183 23.3779C15.3183 23.7009 15.5336 24.0854 16.1642 23.9623C21.0871 22.3484 24.6094 17.7341 24.6094 12.3047C24.6094 5.50942 19.0999 0 12.3047 0Z\"\r\n            />\r\n          </svg>\r\n        </a>\r\n        <a\r\n          href=\"https://twitter.com/angular\"\r\n          aria-label=\"Twitter\"\r\n          target=\"_blank\"\r\n          rel=\"noopener\"\r\n        >\r\n          <svg\r\n            width=\"24\"\r\n            height=\"24\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            alt=\"Twitter\"\r\n          >\r\n            <path\r\n              d=\"M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z\"\r\n            />\r\n          </svg>\r\n        </a>\r\n        <a\r\n          href=\"https://www.youtube.com/channel/UCbn1OgGei-DV7aSRo_HaAiw\"\r\n          aria-label=\"Youtube\"\r\n          target=\"_blank\"\r\n          rel=\"noopener\"\r\n        >\r\n          <svg\r\n            width=\"29\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 29 20\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            alt=\"Youtube\"\r\n          >\r\n            <path\r\n              fill-rule=\"evenodd\"\r\n              clip-rule=\"evenodd\"\r\n              d=\"M27.4896 1.52422C27.9301 1.96749 28.2463 2.51866 28.4068 3.12258C29.0004 5.35161 29.0004 10 29.0004 10C29.0004 10 29.0004 14.6484 28.4068 16.8774C28.2463 17.4813 27.9301 18.0325 27.4896 18.4758C27.0492 18.9191 26.5 19.2389 25.8972 19.4032C23.6778 20 14.8068 20 14.8068 20C14.8068 20 5.93586 20 3.71651 19.4032C3.11363 19.2389 2.56449 18.9191 2.12405 18.4758C1.68361 18.0325 1.36732 17.4813 1.20683 16.8774C0.613281 14.6484 0.613281 10 0.613281 10C0.613281 10 0.613281 5.35161 1.20683 3.12258C1.36732 2.51866 1.68361 1.96749 2.12405 1.52422C2.56449 1.08095 3.11363 0.76113 3.71651 0.596774C5.93586 0 14.8068 0 14.8068 0C14.8068 0 23.6778 0 25.8972 0.596774C26.5 0.76113 27.0492 1.08095 27.4896 1.52422ZM19.3229 10L11.9036 5.77905V14.221L19.3229 10Z\"\r\n            />\r\n          </svg>\r\n        </a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</main>\r\n\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * The content above * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * End of Placeholder  * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n\r\n\r\n<router-outlet />\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-dd7e5bfcc9e7bfe3f2396bc3b401330d5d39e474a4690a82dba3d9e42b1b5837c9bf92118eef42b2c36e12737f5339ab464fc99f9779df6db49876445d2138b3",
            "file": "src/app/lib/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "expanded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": true,
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": true,
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": true,
                    "line": 13,
                    "type": "number",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "type",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 14,
                    "type": "\"primary\" | \"secondary\" | \"tertiary\" | \"ghost\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClicked",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'lib-button',\r\n  imports: [CommonModule],\r\n  templateUrl: './button.component.html',\r\n  styleUrl: './button.component.scss'\r\n})\r\nexport class ButtonComponent {\r\n\r\n  @Input({required: true}) label?: string;\r\n  @Input({required: false}) tabIndex: number = 0;\r\n  @Input({required: true}) type: 'primary' | 'secondary' | 'tertiary' | 'ghost' = 'primary';\r\n  @Input({required: false}) isDisabled = false;\r\n  @Input({required: false}) expanded = false;\r\n\r\n  @Output() buttonClicked = new EventEmitter<boolean>();\r\n\r\n  handleClick(): void {\r\n    this.buttonClicked.emit(true);\r\n  }\r\n\r\n  // Maneja las teclas presionadas\r\n  handleKeydown(event: KeyboardEvent): void {\r\n    if (event.key === 'Enter' || event.key === ' ') {\r\n      event.preventDefault();\r\n      console.log('Botón activado con teclado');\r\n      this.handleClick();\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./button.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<button\r\n  class=\"btn\"\r\n  [ngClass]=\"{\r\n    'primary': type === 'primary',\r\n    'secondary': type === 'secondary',\r\n    'tertiary': type === 'tertiary',\r\n    'ghost': type === 'ghost',\r\n    'expanded': expanded === true,\r\n  }\"\r\n  [attr.tabindex]=\"tabIndex\"\r\n  (click)=\"handleClick()\"\r\n  (keydown)=\"handleKeydown($event)\"\r\n  [disabled]=\"isDisabled\"\r\n>\r\n  {{ label }}\r\n</button>\r\n"
        },
        {
            "name": "ButtonDefaultComponent",
            "id": "component-ButtonDefaultComponent-fcdd401ea1a972c31ea2b40a8c59dd3283961dd8d1d0c0ac620f126fa0122c174ef70aa3471a75d9ed68af1b15c4d702e16b94beeca19965be9059b5b75a4968",
            "file": "src/stories/buttondefault.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./buttondefault.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 774,
                            "end": 787,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 775,
                                "end": 783,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./buttondefault.css'],\n})\nexport class ButtonDefaultComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #1ea7fd;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./buttondefault.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "CalendarComponent",
            "id": "component-CalendarComponent-bc28d4f471d8e629e441ab804d61bcab80f62f40fa99507f1bb89ac4bc78af6ac6d0f109af0dcd48fc2ca00fe93636a0cdda12008daa632ceec088bd9c4cae7a",
            "file": "src/app/lib/components/calendar/calendar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-calendar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./calendar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClicked",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'lib-calendar',\r\n  imports: [CommonModule],\r\n  templateUrl: './calendar.component.html',\r\n  styleUrl: './calendar.component.scss'\r\n})\r\nexport class CalendarComponent implements OnInit, OnChanges{\r\n\r\n  constructor() {\r\n\r\n  }\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n  ngOnInit(): void {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  @Input() label?: string;\r\n  @Output() buttonClicked = new EventEmitter<boolean>();\r\n\r\n}\r\n",
            "styleUrl": "./calendar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"calendar\">\r\n  <!-- Header con mes y año -->\r\n  <div class=\"calendar__header\">\r\n    <button class=\"calendar__nav calendar__nav--prev\">&#9664;</button>\r\n    <span class=\"calendar__month-year\">Enero 2025</span>\r\n    <button class=\"calendar__nav calendar__nav--next\">&#9654;</button>\r\n  </div>\r\n\r\n  <!-- Días de la semana -->\r\n  <div class=\"calendar__weekdays\">\r\n    <div class=\"calendar__weekday\">Lun</div>\r\n    <div class=\"calendar__weekday\">Mar</div>\r\n    <div class=\"calendar__weekday\">Mié</div>\r\n    <div class=\"calendar__weekday\">Jue</div>\r\n    <div class=\"calendar__weekday\">Vie</div>\r\n    <div class=\"calendar__weekday\">Sáb</div>\r\n    <div class=\"calendar__weekday\">Dom</div>\r\n  </div>\r\n\r\n  <!-- Días del mes -->\r\n  <div class=\"calendar__days\">\r\n    <!-- Días de ejemplo, a reemplazar dinámicamente con JS -->\r\n    <div class=\"calendar__day\">1</div>\r\n    <div class=\"calendar__day\">2</div>\r\n    <div class=\"calendar__day\">3</div>\r\n    <!-- ... -->\r\n    <div class=\"calendar__day\">30</div>\r\n    <div class=\"calendar__day\">31</div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "DatePickerCalendarMobileComponent",
            "id": "component-DatePickerCalendarMobileComponent-c6164cf8870c1855986517df7c1da0c9bbbc77ad6b20c588e926e9c39d45707a9dfcbdd895589d98f5a2d9a29bd4c9646c02b865a6123151576fb7dde34910e6",
            "file": "src/app/lib/components/date-picker/components/date-picker-calendar-mobile/date-picker-calendar-mobile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-date-picker-calendar-mobile",
            "styleUrls": [
                "./date-picker-calendar-mobile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date-picker-calendar-mobile.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "dateRecibedToInputEnd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": true,
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "dateRecibedToInputStart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": true,
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "isRange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "calendarClosed",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "dateSelectedEnd",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                },
                {
                    "name": "dateSelectedStart",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "currentMonthStart",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "dates",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "(number | null)[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "datesSecondMonth",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "(number | null)[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "day",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "days",
                    "defaultValue": "['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "firstDayOfMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "month",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "selectedDateEnd",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "selectedDateStart",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "year",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "buttonClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "formatDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateCalendar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMonthName",
                    "args": [
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToNextMonth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goToPreviousMonth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hideCalendar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeDate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "splitDate",
                    "args": [
                        {
                            "name": "formattedDate",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "formattedDate",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ButtonComponent } from '../../../button/button.component';\r\n\r\nexport interface selectedDateStart {\r\n  day: number;\r\n  month: number;\r\n  year: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-date-picker-calendar-mobile',\r\n  imports: [CommonModule, ButtonComponent],\r\n  templateUrl: './date-picker-calendar-mobile.component.html',\r\n  styleUrls: ['./date-picker-calendar-mobile.component.scss'],\r\n})\r\nexport class DatePickerCalendarMobileComponent implements OnInit {\r\n  @Input({ required: true }) isRange!: boolean;\r\n  @Input({ required: false }) dateRecibedToInputStart!: string;\r\n  @Input({ required: false }) dateRecibedToInputEnd!: string;\r\n  @Output() dateSelectedStart = new EventEmitter<string>();\r\n  @Output() dateSelectedEnd = new EventEmitter<string>();\r\n  @Output() calendarClosed = new EventEmitter<void>(); // Emite un evento cuando se cierra el calendario\r\n  days: string[] = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  day: number = 0;\r\n  month: number = 0;\r\n  year: number = 0;\r\n  currentMonthStart: string = '';\r\n  selectedDateStart: { day: number; month: number; year: number } | null = null;\r\n  selectedDateEnd: { day: number; month: number; year: number } | null = null;\r\n\r\n  dates: (number | null)[] = []; // Usaremos null para los días vacíos\r\n  datesSecondMonth: (number | null)[] = []; // Usaremos null para los días vacíos\r\n  firstDayOfMonth: number | undefined; // El día de la semana en que comienza el mes\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    this.initializeDate();\r\n    this.generateCalendar();\r\n  }\r\n\r\n  // Función para inicializar la fecha\r\n  private initializeDate(): void {\r\n    const currentDate = new Date();\r\n    let formattedDate = '';\r\n    if (this.dateRecibedToInputStart.length == 10) {\r\n      formattedDate = this.dateRecibedToInputStart;\r\n    } else {\r\n      formattedDate = this.formatDate(currentDate);\r\n    }\r\n\r\n    const [dayString, monthString, yearString] = this.splitDate(formattedDate);\r\n\r\n    this.day = parseInt(dayString, 10);\r\n    this.month = parseInt(monthString, 10);\r\n    this.year = parseInt(yearString, 10);\r\n\r\n    if (this.dateRecibedToInputStart.length == 10) {\r\n      this.selectedDateStart = {\r\n        day: this.day,\r\n        month: this.month,\r\n        year: this.year,\r\n      };\r\n    }\r\n  }\r\n\r\n  // Función para formatear la fecha en 'es-ES'\r\n  private formatDate(date: Date): string {\r\n\r\n    const formattedDate = date.toLocaleDateString('es-ES', {\r\n      day: '2-digit',\r\n      month: '2-digit',\r\n      year: 'numeric',\r\n    });\r\n    return formattedDate\r\n  }\r\n\r\n  // Función para dividir la fecha en partes (día, mes, año)\r\n  private splitDate(formattedDate: string): string[] {\r\n    return formattedDate.split('/');\r\n  }\r\n\r\n  generateCalendar(): void {\r\n    this.currentMonthStart = this.getMonthName(this.month);\r\n\r\n    const dateComplete = new Date(this.year, this.month - 1, 1); // Crear un objeto Date con el mes actual\r\n\r\n    dateComplete.setDate(1); // Ponemos la fecha al primer día del mes\r\n    this.firstDayOfMonth = dateComplete.getDay(); // Obtener el día de la semana del primer día (0=Domingo, 1=Lunes, ..., 6=Sábado)\r\n    const daysInMonth = new Date(this.year, this.month, 0).getDate(); // Obtener el número de días del mes\r\n\r\n    // Rellenamos el calendario con los días\r\n    this.dates = [];\r\n    this.datesSecondMonth = [];\r\n    for (let i = 0; i < this.firstDayOfMonth; i++) {\r\n      this.dates.push(null); // Agregamos null para los espacios vacíos\r\n    }\r\n    for (let day = 1; day <= daysInMonth; day++) {\r\n      this.dates.push(day); // Agregamos los días del mes\r\n    }\r\n\r\n  }\r\n\r\n  selectDate(date: number | null, type: string): void {\r\n    if (date == null) return;\r\n    if (type == 'start') {\r\n      this.selectedDateStart = {\r\n        day: date,\r\n        month: this.month,\r\n        year: this.year,\r\n      };\r\n      const formattedDay = this.selectedDateStart.day < 10 ? `0${this.selectedDateStart.day}` : `${this.selectedDateStart.day}`;\r\n      const formattedMonth = this.selectedDateStart.month < 10 ? `0${this.selectedDateStart.month}` : `${this.selectedDateStart.month}`;\r\n      this.dateSelectedStart.emit(`${formattedDay}/${formattedMonth}/${this.selectedDateStart.year}`);\r\n    } else {\r\n      this.selectedDateEnd = {\r\n        day: date,\r\n        month: this.month,\r\n        year: this.year,\r\n      };\r\n      const formattedDay = this.selectedDateEnd.day < 10 ? `0${this.selectedDateEnd.day}` : `${this.selectedDateEnd.day}`;\r\n      const formattedMonth = this.selectedDateEnd.month < 10 ? `0${this.selectedDateEnd.month}` : `${this.selectedDateEnd.month}`;\r\n      this.dateSelectedEnd.emit(`${formattedDay}/${formattedMonth}/${this.selectedDateEnd.year}`);\r\n    }\r\n\r\n  }\r\n\r\n  goToPreviousMonth(): void {\r\n    if (this.month === 1) {\r\n      this.month = 12;\r\n      this.year -= 1;\r\n    } else {\r\n      this.month -= 1;\r\n    }\r\n    this.currentMonthStart = this.getMonthName(this.month);\r\n    this.generateCalendar();\r\n  }\r\n\r\n  goToNextMonth(): void {\r\n    if (this.month === 12) {\r\n      this.month = 1;\r\n      this.year += 1;\r\n    } else {\r\n      this.month += 1;\r\n    }\r\n    this.currentMonthStart = this.getMonthName(this.month);\r\n    this.generateCalendar();\r\n  }\r\n\r\n  getMonthName(month: number): string {\r\n    const months = [\r\n      'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',\r\n      'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'\r\n    ];\r\n    return months[month - 1];\r\n  }\r\n\r\n  hideCalendar(): void {\r\n    this.calendarClosed.emit(); // Emitimos el evento para cerrar el calendario\r\n  }\r\n\r\n  buttonClicked(): void {\r\n    this.hideCalendar();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '@styles/variables' as *;\r\n\r\n.calendar-mobile {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background-color: white;\r\n  padding: 1rem;\r\n  font-family: $font-family-default;\r\n  box-sizing: border-box;\r\n  display: flex; /* Activar Flexbox */\r\n  flex-direction: column; /* Organizar en columna */\r\n  gap: 16px;\r\n  overflow: hidden; /* Evita desbordes */\r\n\r\n  h4 {\r\n    margin: 0;\r\n  }\r\n  body {\r\n    margin: 0;\r\n  }\r\n\r\n  &__header {\r\n    text-align: center; /* Centra el texto en el header */\r\n    font-size: 1.5rem;\r\n    flex-shrink: 0; /* El header no colapsa */\r\n  }\r\n\r\n  &__body {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex: 1; /* El body ocupa el espacio restante */\r\n    gap: 2rem;\r\n\r\n    .calendar-header {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      font-size: 1rem;\r\n      font-weight: bold;\r\n      padding-bottom: 1rem;\r\n\r\n      button {\r\n        background-color: transparent;\r\n        border: none;\r\n        font-size: 1rem;\r\n        cursor: pointer;\r\n        color: $white-70;\r\n\r\n        &:hover {\r\n          color: $white-70;\r\n        }\r\n      }\r\n    }\r\n    .calendar-days {\r\n      display: grid;\r\n      grid-template-columns: repeat(7, 1fr);\r\n      gap: 0.5rem;\r\n      text-align: center;\r\n      font-weight: bold;\r\n      color: $white-80;\r\n      margin-bottom: 0.5rem;\r\n    }\r\n\r\n    .calendar-dates {\r\n      display: grid;\r\n      grid-template-columns: repeat(7, 1fr);\r\n      gap: 0.5rem;\r\n      text-align: center;\r\n\r\n      .calendar-date {\r\n        padding: 0.5rem;\r\n        border-radius: 4px;\r\n        background-color: $white-50;\r\n        cursor: pointer;\r\n        transition: background-color 0.1s, color 0.1s;\r\n\r\n        @media screen and (max-width: 320px) {\r\n          padding: 0.5rem 0.25rem;\r\n        }\r\n\r\n        &.empty {\r\n          background-color: transparent; // Los días vacíos no tienen fondo\r\n          cursor: default; // Deshabilita el clic en los días vacíos\r\n        }\r\n\r\n        &:hover:not(.empty) {\r\n          background-color: $white-70;\r\n          color: white;\r\n        }\r\n\r\n        &.selected {\r\n          background-color: $primary;\r\n          font-weight: 600;\r\n          color: white;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  &__footer {\r\n    display: flex;\r\n    gap: 0.5rem;\r\n    flex-direction: row;\r\n    width: 100%;\r\n    flex-shrink: 0; /* El footer no colapsa */\r\n\r\n    .button-wrapper {\r\n      flex: 1; /* Cada botón ocupa el 50% del ancho */\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./date-picker-calendar-mobile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 34
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"calendar-mobile\">\r\n  <header class=\"calendar-mobile__header\">\r\n    <h4>{{ isRange ? 'Selecciona un rango de fechas' : 'Selecciona una fecha' }}</h4>\r\n  </header>\r\n\r\n  <div class=\"calendar-mobile__body\">\r\n    <div class=\"calendar-mobile__body-calendar1\">\r\n      <div class=\"calendar-header\">\r\n        <button (click)=\"goToPreviousMonth()\">&lt;</button>\r\n        <span>{{ currentMonthStart }} de {{this.year}}</span>\r\n        <button (click)=\"goToNextMonth()\">&gt;</button>\r\n      </div>\r\n      <div class=\"calendar-days\">\r\n        <span *ngFor=\"let day of days\">{{ day }}</span>\r\n      </div>\r\n      <div class=\"calendar-dates\">\r\n        <div class=\"calendar-date\" *ngFor=\"let date of dates\" [class.selected]=\"\r\n            selectedDateStart &&\r\n            selectedDateStart.day === date &&\r\n            selectedDateStart.month === month &&\r\n            selectedDateStart.year === year\r\n          \" (click)=\"selectDate(date, 'start')\" [ngClass]=\"{'empty': date === null}\">\r\n          {{ date }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div style=\"border: 1px solid black;\" *ngIf=\"isRange\"></div>\r\n\r\n    <div class=\"calendar-mobile__body-calendar1\" *ngIf=\"isRange\">\r\n      <div class=\"calendar-header\">\r\n        <button (click)=\"goToPreviousMonth()\">&lt;</button>\r\n        <span>{{ currentMonthEnd }} de {{this.year}}</span>\r\n        <button (click)=\"goToNextMonth()\">&gt;</button>\r\n      </div>\r\n      <div class=\"calendar-days\">\r\n        <span *ngFor=\"let day of days\">{{ day }}</span>\r\n      </div>\r\n      <div class=\"calendar-dates\">\r\n        <div class=\"calendar-date\" *ngFor=\"let date of dates\" [class.selected]=\"\r\n            selectedDateEnd &&\r\n            selectedDateEnd.day === date &&\r\n            selectedDateEnd.month === month &&\r\n            selectedDateEnd.year === year\r\n          \" (click)=\"selectDate(date, 'end')\" [ngClass]=\"{'empty': date === null}\">\r\n          {{ date }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n\r\n  <footer class=\"calendar-mobile__footer\">\r\n    <div class=\"button-wrapper\">\r\n      <lib-button [type]=\"'secondary'\" [label]=\"'Cancelar'\" [tabIndex]=\"0\" [isDisabled]=\"false\" [expanded]=\"true\"\r\n        (buttonClicked)=\"buttonClicked()\">\r\n      </lib-button>\r\n    </div>\r\n    <div class=\"button-wrapper\">\r\n      <lib-button [type]=\"'primary'\" [label]=\"'Aceptar'\" [tabIndex]=\"0\" [isDisabled]=\"false\" [expanded]=\"true\"\r\n        (buttonClicked)=\"buttonClicked()\">\r\n      </lib-button>\r\n    </div>\r\n  </footer>\r\n\r\n</div>\r\n"
        },
        {
            "name": "DatePickerComponent",
            "id": "component-DatePickerComponent-55982876dca882009328f1cefc3896bdf28c59262cb9d85d9010352b29b9242453ce37d54f4554d81c2d396bc393df9579c6d66cc6360dc9d5ab8836da8d4fbc",
            "file": "src/app/lib/components/date-picker/date-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-date-picker",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./date-picker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "endDate",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": true,
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "endHelperText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": true,
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "endLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": true,
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "endPlaceholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": true,
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "isFocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "isRange",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "isReadonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "layout",
                    "defaultValue": "'horizontal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 27,
                    "type": "\"horizontal\" | \"vertical\"",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "separated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "startDate",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "startHelperText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "startLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "startPlaceholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 23,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "dateChange",
                    "defaultValue": "new EventEmitter<{ start: Date | null; end: Date | null }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "currentInput",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"start\" | \"end\" | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "isCalendarMobileVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "isMobile",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "checkIfMobile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hideCalendar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDateSelectedEnd",
                    "args": [
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDateSelectedStart",
                    "args": [
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showCalendar",
                    "args": [
                        {
                            "name": "input",
                            "type": "\"start\" | \"end\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "\"start\" | \"end\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "DatePickerInputComponent",
                    "type": "component"
                },
                {
                    "name": "DatePickerCalendarMobileComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DatePickerInputComponent } from './components/date-picker-input/date-picker-input.component';\r\nimport { DatePickerCalendarMobileComponent } from './components/date-picker-calendar-mobile/date-picker-calendar-mobile.component';\r\n\r\n@Component({\r\n  selector: 'lib-date-picker',\r\n  imports: [CommonModule, DatePickerInputComponent, DatePickerCalendarMobileComponent],\r\n  templateUrl: './date-picker.component.html',\r\n  styleUrl: './date-picker.component.scss'\r\n})\r\nexport class DatePickerComponent implements OnChanges{\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    // console.log('Cambios', changes)\r\n  }\r\n\r\n  @Input({ required: true }) isRange: boolean = false;\r\n  @Input({ required: true }) startDate: string = ''; // Cambiado de string a Date\r\n  @Input({ required: false }) endDate: string = ''; // Cambiado de string a Date\r\n  @Input({ required: true }) startLabel: string = '';\r\n  @Input({ required: false }) endLabel: string = ''\r\n  @Input({ required: true }) startPlaceholder: string = ''\r\n  @Input({ required: false }) endPlaceholder: string = ''\r\n  @Input({ required: true }) startHelperText: string = ''\r\n  @Input({ required: false }) endHelperText: string = ''\r\n  @Input({ required: true }) layout: 'horizontal' | 'vertical' = 'horizontal';\r\n  @Input({ required: true }) separated: boolean = false;\r\n  @Input({ required: true }) isDisabled: boolean = false;\r\n  @Input({ required: true }) isFocus: boolean = false;\r\n  @Input({ required: true }) isReadonly: boolean = false;\r\n  @Output() dateChange = new EventEmitter<{ start: Date | null; end: Date | null }>();\r\n\r\n  isCalendarMobileVisible: boolean = false;\r\n  currentInput: 'start' | 'end' | null = null;\r\n  isMobile: boolean = false;\r\n\r\n  // Muestra el calendario asociado al input actual\r\n  showCalendar(input: 'start' | 'end'): void {\r\n    this.currentInput = input;\r\n    this.checkIfMobile();\r\n    if (this.isMobile == true) {\r\n      this.isCalendarMobileVisible = true;\r\n    }\r\n  }\r\n\r\n  hideCalendar() {\r\n    if (this.isMobile == true) {\r\n      this.isCalendarMobileVisible = false;\r\n    }\r\n  }\r\n\r\n  // Comprobación si el tamaño es móvil\r\n  private checkIfMobile(): void {\r\n    this.isMobile = window.innerWidth <= 768;\r\n  }\r\n\r\n  onDateSelectedStart(date: string): void {\r\n    console.log('Fecha recibida Start:', date);\r\n    this.startDate = date\r\n    // Puedes manipular la fecha recibida, por ejemplo, actualizar un campo de fecha en el componente padre.\r\n  }\r\n\r\n  onDateSelectedEnd(date: string): void {\r\n    console.log('Fecha recibida End:', date);\r\n    this.endDate = date\r\n    // Puedes manipular la fecha recibida, por ejemplo, actualizar un campo de fecha en el componente padre.\r\n  }\r\n}\r\n",
            "styleUrl": "./date-picker.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"date-picker\">\r\n  <div class=\"date-picker__inputs\" [ngClass]=\"{\r\n    'date-picker__inputs--separated': separated,\r\n    'date-picker__inputs--vertical': layout === 'vertical'\r\n  }\">\r\n    <app-date-picker-input\r\n      (click)=\"showCalendar('start')\"\r\n      [label]=\"startLabel\"\r\n      [placeholder]=\"startPlaceholder\"\r\n      [helperText]=\"startHelperText\"\r\n      [value]=\"startDate\"\r\n      [isDisabled]=\"isDisabled\"\r\n      [isFocus]=\"isFocus\"\r\n      [isReadonly]=\"isReadonly\">\r\n    </app-date-picker-input>\r\n\r\n    <app-date-picker-input *ngIf=\"isRange\"\r\n      (click)=\"showCalendar('end')\"\r\n      [label]=\"endLabel\"\r\n      [placeholder]=\"endPlaceholder\"\r\n      [helperText]=\"endHelperText\"\r\n      [value]=\"endDate\"\r\n      [isDisabled]=\"isDisabled\"\r\n      [isFocus]=\"isFocus\"\r\n      [isReadonly]=\"isReadonly\">\r\n    </app-date-picker-input>\r\n  </div>\r\n\r\n  <!-- <div #fullScreenDiv class=\"date-picker__full-screen-div\" *ngIf=\"isCalendarMobileVisible\">\r\n    <button (click)=\"hideCalendar()\">Cerrar</button>\r\n  </div> -->\r\n  <div class=\"date-picker__calendar\" *ngIf=\"isCalendarMobileVisible\">\r\n    <app-date-picker-calendar-mobile\r\n      [dateRecibedToInputStart]=\"startDate\"\r\n      [dateRecibedToInputEnd]=\"endDate\"\r\n      (calendarClosed)=\"hideCalendar()\"\r\n      [isRange]=\"isRange\"\r\n      (dateSelectedStart)=\"onDateSelectedStart($event)\"\r\n      (dateSelectedEnd)=\"onDateSelectedEnd($event)\">\r\n    </app-date-picker-calendar-mobile>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "DatePickerInputComponent",
            "id": "component-DatePickerInputComponent-80795a7d0afa3365f841ece2abe930c12ef3a0212a4201bc0923500631b16d0a70e798afb7a6944ac0889dea279d089d73225accf305b55cf6ed3ae91dc25237",
            "file": "src/app/lib/components/date-picker/components/date-picker-input/date-picker-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-date-picker-input",
            "styleUrls": [
                "./date-picker-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date-picker-input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "helperText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isFocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isReadonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clicked",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "clickIconCalendar",
                    "args": [
                        {
                            "name": "inputElement",
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inputElement",
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidDate",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlurHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFocusHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onInputClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onKeypress",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "IconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, Output } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { IconComponent } from '../../../icon/icon.component';\r\n\r\n@Component({\r\n  selector: 'app-date-picker-input',\r\n  imports: [CommonModule, IconComponent],\r\n  templateUrl: './date-picker-input.component.html',\r\n  styleUrls: ['./date-picker-input.component.scss'],\r\n})\r\nexport class DatePickerInputComponent implements OnChanges{\r\n  @Input() value: string | null = null;\r\n  @Input() label: string = '';\r\n  @Input() helperText: string = '';\r\n  @Input() placeholder: string = '';\r\n  @Input() isDisabled: boolean = false;\r\n  @Input() isFocus: boolean = false;\r\n  @Input() isReadonly: boolean = false;\r\n\r\n  @Output() clicked = new EventEmitter<void>();\r\n\r\n  ngOnChanges(): void {\r\n    if (this.value && !this.isValidDate(this.value)) {\r\n      //console.error(`Invalid date format: ${this.value}. Expected format: DD/MM/YYYY`);\r\n    }\r\n  }\r\n\r\n  isValidDate(value: string): boolean {\r\n    const dateRegex = /^(0[1-9]|[12][0-9]|3[01])\\/(0[1-9]|1[0-2])\\/(\\d{4})$/;\r\n    return dateRegex.test(value);\r\n  }\r\n\r\n  onInputClick(): void {\r\n    const event = new CustomEvent('click');\r\n    dispatchEvent(event);\r\n    this.clicked.emit();\r\n  }\r\n\r\n  onInput(event: Event): void {\r\n    // console.log('texto añadido')\r\n  }\r\n\r\n  onFocusHandler(event: Event): void {\r\n    this.isFocus = true;\r\n    // console.log('Focus Input')\r\n  }\r\n\r\n  onBlurHandler(event: Event): void {\r\n    // console.log('Blur Out Input')\r\n    this.isFocus = false;\r\n  }\r\n\r\n  onKeypress(event: Event): void {\r\n    // console.log('onKeypress')\r\n  }\r\n\r\n  clickIconCalendar(inputElement: HTMLInputElement): void {\r\n    if (!this.isDisabled) {\r\n      inputElement.focus(); // Enfoca el input cuando se hace clic en el icono\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '@styles/variables' as *;\r\n\r\n.date-picker-input {\r\n  --text-color: black;\r\n  --focus-color: #{$white-70};\r\n  --label-color: #{$white-70};\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 4px;\r\n  font-family: $font-family-default;\r\n\r\n  &--focus {\r\n    --focus-color: #{$primary};\r\n  }\r\n\r\n  &--disabled {\r\n    --focus-color: #{$white-40};\r\n    --text-color: #{$white-40};\r\n    --label-color: #{$white-40};\r\n    cursor: default;\r\n    pointer-events: none;\r\n  }\r\n\r\n  &--readonly {\r\n    --focus-color: #{$white-40};\r\n    --label-color: #{$white-40};\r\n    cursor: default;\r\n    pointer-events: none;\r\n  }\r\n\r\n  &__label {\r\n    user-select: none;\r\n    color: var(--label-color);\r\n    font-size: 12px;\r\n  }\r\n\r\n  &__help {\r\n    user-select: none;\r\n    color: var(--label-color);\r\n    font-size: 12px;\r\n  }\r\n\r\n  &__content {\r\n    width: 100%;\r\n    display: flex;\r\n    height: 2.25rem;\r\n    padding: 4px;\r\n    border: 1px solid var(--focus-color);\r\n    border-radius: 8px;\r\n    box-sizing: border-box;\r\n    cursor: pointer;\r\n    user-select: none;\r\n\r\n    &-icon {\r\n      color: var(--focus-color)\r\n    }\r\n\r\n  }\r\n\r\n  input {\r\n    width: 100%;\r\n    height: 100%;\r\n    border: none;\r\n    background: border-box;\r\n    font-size: 1rem;\r\n    color: var(--text-color);\r\n    background-color: transparent;\r\n    cursor: pointer;\r\n    user-select: none;\r\n  }\r\n\r\n  input:focus {\r\n    outline: none;\r\n    --focus-color: #{$white-70};\r\n  }\r\n\r\n  input::placeholder {\r\n    color: #{$white-70};\r\n  }\r\n}\r\n",
                    "styleUrl": "./date-picker-input.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"date-picker-input\" [ngClass]=\"{\r\n  'date-picker-input--focus': isFocus,\r\n  'date-picker-input--disabled': isDisabled,\r\n  'date-picker-input--readonly': isReadonly\r\n}\">\r\n  <label class=\"date-picker-input__label\" *ngIf=\"label\">{{ label }}</label>\r\n  <div class=\"date-picker-input__content\">\r\n    <input\r\n      #inputRef\r\n      type=\"text\"\r\n      [value]=\"value\"\r\n      (click)=\"onInputClick()\"\r\n      [maxLength]=\"10\"\r\n      [placeholder]=\"placeholder\"\r\n      [disabled]=\"isDisabled\"\r\n      (input)=\"onInput($event)\"\r\n      (focus)=\"onFocusHandler($event)\"\r\n      (blur)=\"onBlurHandler($event)\"\r\n      (keypress)=\"onKeypress($event)\" />\r\n    <div class=\"date-picker-input__content-icon\" (click)=\"clickIconCalendar(inputRef)\">\r\n      <app-icon [iconName]=\"'calendar-line'\" [size]=\"24\"></app-icon>\r\n    </div>\r\n  </div>\r\n  <span class=\"date-picker-input__help\" *ngIf=\"helperText\">{{ helperText }}</span>\r\n</div>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-75ad07f5c741c4fefdde6f110af1bc21f5adbd84b2aeeda737d56402219e172429b8ecf0462906722e700ab31ec506a65deee9a8bd8ffcc14260c8bf14384292",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonDefaultComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonDefaultComponent } from './buttondefault.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonDefaultComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-ffec4d263cdfa2761260e2a099866695456b3045732da29b278030fa304bd6be3b717e6bbf52af8dcccda981cee39bd4e4d25699300baa0e900b7aeb2b2cbb58",
            "file": "src/app/lib/components/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-icon",
            "styleUrls": [
                "./icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "fillColor",
                    "defaultValue": "'currentColor'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "16",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "iconSvg",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "observer",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MutationObserver | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "applyFillColor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "observeSvgChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "SafeHtmlPipe",
                    "type": "pipe"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, Input, OnChanges, OnInit, Renderer2, SimpleChanges } from '@angular/core';\r\nimport { IconService } from '../../../services/icon.service';\r\nimport { SafeHtmlPipe } from '../../../pipes/safe-html.pipe';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-icon',\r\n  templateUrl: './icon.component.html',\r\n  styleUrls: ['./icon.component.scss'],\r\n  imports: [SafeHtmlPipe, CommonModule],\r\n})\r\n\r\nexport class IconComponent implements AfterViewInit, OnChanges {\r\n  @Input() iconName: string = '';\r\n  @Input() fillColor: string = 'currentColor';\r\n  @Input() size: number = 16;\r\n  iconSvg: string = '';\r\n  private observer: MutationObserver | null = null;\r\n\r\n  constructor(\r\n    private iconService: IconService,\r\n    private elementRef: ElementRef,\r\n    private renderer: Renderer2\r\n  ) { }\r\n\r\n\r\n  ngAfterViewInit(): void {\r\n    if (this.iconName) {\r\n      this.iconService.getIcon(this.iconName).subscribe(svg => {\r\n        if (svg) {\r\n          this.iconSvg = svg;\r\n          this.observeSvgChanges(); // Observa cuando el SVG esté en el DOM\r\n        } else {\r\n          console.error('SVG not found in library for icon:', this.iconName);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['fillColor'] && !changes['fillColor'].firstChange) {\r\n      this.applyFillColor(); // Aplica el nuevo color si cambia `fillColor`\r\n    }\r\n  }\r\n\r\n  private observeSvgChanges(): void {\r\n    // Crea un observer para detectar cambios en el DOM\r\n    this.observer = new MutationObserver(() => {\r\n      const svgElement = this.elementRef.nativeElement.querySelector('svg');\r\n      if (svgElement) {\r\n        this.applyFillColor(); // Aplica el color una vez que el SVG está disponible\r\n        this.observer?.disconnect(); // Detén la observación\r\n      }\r\n    });\r\n\r\n    // Comienza a observar cambios en el DOM del componente\r\n    this.observer.observe(this.elementRef.nativeElement, { childList: true, subtree: true });\r\n  }\r\n\r\n  private applyFillColor(): void {\r\n    const svgElement = this.elementRef.nativeElement.querySelector('svg');\r\n    if (svgElement) {\r\n      this.renderer.setAttribute(svgElement, 'fill', this.fillColor);\r\n    }\r\n    // console.log(svgElement)\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.observer?.disconnect(); // Limpieza del observer\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.lib-icon {\r\n  height: 48px;\r\n  width: 48px;\r\n}\r\n",
                    "styleUrl": "./icon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "iconService",
                        "type": "IconService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "iconService",
                        "type": "IconService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnChanges"
            ],
            "templateData": "<div\r\n  class=\"lib-icon\"\r\n  *ngIf=\"iconSvg\"\r\n  [innerHTML]=\"iconSvg | safeHtml\"\r\n  [ngStyle]=\"{ width: size + 'px', height: size + 'px'}\">\r\n</div>\r\n"
        },
        {
            "name": "InputSimpleComponent",
            "id": "component-InputSimpleComponent-7b70087a1db9e7909d837df885f9450c9aa4d25bd4bbc7bd80df6151e66e8aca24e43722bdf422fd320da3d14459f7669351a557c472efc16ba07d4127e055fc",
            "file": "src/app/lib/components/input-simple/input-simple.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-input-simple",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-simple.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "helperText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isReadonly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "maxLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "InputType",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string | number | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "helperTextDefault",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "handleEmailValidation",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePasswordValidation",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleTextValidation",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlurHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFocusHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onInputHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "inputRef",
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "inputRef",
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateInputByType",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "IconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { IconComponent } from '../icon/icon.component';\r\nimport { InputType } from '../../../enums/input-type.enum';\r\n\r\n@Component({\r\n  selector: 'lib-input-simple',\r\n  imports: [CommonModule, IconComponent],\r\n  templateUrl: './input-simple.component.html',\r\n  styleUrl: './input-simple.component.scss'\r\n})\r\nexport class InputSimpleComponent implements OnChanges, OnInit{\r\n\r\n  ngOnInit(): void {\r\n    this.helperTextDefault = this.helperText\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['type'] && !changes['type'].firstChange) {\r\n      const valueAsString = this.value != null ? String(this.value) : ''; // Asegura que el valor sea un string\r\n      this.validateInputByType(valueAsString); // Pasar el valor convertido a string\r\n    }\r\n  }\r\n\r\n  @Input() type!: InputType; // Tipo por defecto\r\n  @Input() value?: string | number | null;\r\n  @Input() label?: string;\r\n  @Input() helperText?: string;\r\n  @Input() placeholder?: string;\r\n  @Input() isDisabled?: boolean;\r\n  @Input() isFocus?: boolean;\r\n  @Input() isReadonly?: boolean;\r\n  @Input() isError?: boolean;\r\n  @Input() maxLength?: number;\r\n\r\n  helperTextDefault?: string;\r\n\r\n  @Output() valueChange = new EventEmitter<any>();\r\n\r\n  onInputHandler(event: Event): void {\r\n    const input = (event.target as HTMLInputElement).value;\r\n    this.valueChange.emit(input);\r\n    this.validateInputByType(input)\r\n  }\r\n\r\n  onFocusHandler(event: Event): void {\r\n    this.isFocus = true;\r\n    // console.log('Focus Input')\r\n  }\r\n\r\n  onBlurHandler(event: Event): void {\r\n    // console.log('Blur Out Input')\r\n    this.isFocus = false;\r\n  }\r\n\r\n  onKeydown(event: KeyboardEvent, inputRef: HTMLInputElement): void {\r\n    if (event.key === 'Enter') {\r\n      inputRef.blur(); // Quita el foco del input\r\n    } else if (event.key === 'Escape') {\r\n      inputRef.blur(); // Quita el foco del input\r\n    }\r\n  }\r\n\r\n  validateInputByType(value: string): void {\r\n    switch (this.type) {\r\n      case InputType.TEXT:\r\n        this.handleTextValidation(value);\r\n        break;\r\n      case InputType.EMAIL:\r\n        this.handleEmailValidation(value);\r\n        break;\r\n      case InputType.PASSWORD:\r\n        this.handlePasswordValidation(value);\r\n        break;\r\n      default:\r\n        console.warn(`Validation not implemented for type: ${this.type}`);\r\n    }\r\n  }\r\n\r\n  private handleTextValidation(input: string): void {\r\n    if (this.maxLength && input.length > this.maxLength) {\r\n      this.isError = true;\r\n      this.helperText = `Máximo de ${this.maxLength} caracteres permitido.`;\r\n    } else {\r\n      this.isError = false;\r\n      this.helperText = this.helperTextDefault;\r\n    }\r\n  }\r\n\r\n  private handleEmailValidation(input: string): void {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(input)) {\r\n      this.isError = true;\r\n      this.helperText = 'Introduce un correo válido.';\r\n    } else {\r\n      this.isError = false;\r\n      this.helperText = this.helperTextDefault;\r\n    }\r\n  }\r\n\r\n  private handlePasswordValidation(input: string): void {\r\n    if (this.maxLength && input.length > this.maxLength) {\r\n      this.isError = true;\r\n      this.helperText = `Máximo de ${this.maxLength} caracteres permitido.`;\r\n    } else {\r\n      this.isError = false;\r\n      this.helperText = this.helperTextDefault;\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./input-simple.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges",
                "OnInit"
            ],
            "templateData": "<div class=\"input-simple\" [ngClass]=\"{\r\n  'input-simple--focus': isFocus,\r\n  'input-simple--disabled': isDisabled,\r\n  'input-simple--readonly': isReadonly,\r\n  'input-simple--error': isError\r\n}\">\r\n  <label class=\"input-simple__label\" *ngIf=\"label\">{{ label }}</label>\r\n  <div class=\"input-simple__content\">\r\n    <input #inputRef\r\n      [type]=\"type\"\r\n      [value]=\"value\"\r\n      [maxLength]=\"maxLength\"\r\n      [placeholder]=\"placeholder\"\r\n      [disabled]=\"isDisabled || isReadonly\"\r\n      (input)=\"onInputHandler($event)\"\r\n      (focus)=\"onFocusHandler($event)\"\r\n      (blur)=\"onBlurHandler($event)\"\r\n      (keydown)=\"onKeydown($event, inputRef)\" />\r\n    <div class=\"input-simple__content-icon\">\r\n      <app-icon [iconName]=\"'calendar-line'\" [size]=\"24\"></app-icon>\r\n    </div>\r\n  </div>\r\n  <span class=\"input-simple__help\" *ngIf=\"helperText\">{{ helperText }}</span>\r\n</div>\r\n"
        },
        {
            "name": "LinkComponent",
            "id": "component-LinkComponent-9c818e7840ea3ca4f792f2973147f209df449273cd7c35b3ac68ee6d9929e5b47dd1376718cc0f2b4615eacbb7e3afde18a19b8816212b66e238d0bfc5945e23",
            "file": "src/app/lib/components/link/link.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-link",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./link.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "alternative",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": true,
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "iconLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": true,
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "iconRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": true,
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "iconShowType",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "silent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": true,
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "linkClicked",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "selectIconsToShow",
                    "defaultValue": "signal<iconShowType>('left')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "handleClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "IconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, signal } from '@angular/core';\r\nimport { IconComponent } from '../icon/icon.component';\r\n\r\nexport type iconShowType = 'left' | 'right' | 'both' | 'any';\r\n\r\n@Component({\r\n  selector: 'lib-link',\r\n  imports: [IconComponent],\r\n  templateUrl: './link.component.html',\r\n  styleUrl: './link.component.scss'\r\n})\r\nexport class LinkComponent {\r\n\r\n  selectIconsToShow = signal<iconShowType>('left');\r\n  @Input({required: true}) text!: string;\r\n  @Input({required: false}) iconLeft?: string;\r\n  @Input({required: false}) iconRight?: string;\r\n  @Input({required: false}) silent?: boolean;\r\n  @Input({required: false}) alternative?: boolean;\r\n  @Input() set iconType(value: iconShowType) {\r\n    this.selectIconsToShow.set(value);\r\n  }\r\n  @Output() linkClicked = new EventEmitter<boolean>();\r\n\r\n  handleClick(): void {\r\n    this.linkClicked.emit(true);\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./link.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "iconType": {
                    "name": "iconType",
                    "setSignature": {
                        "name": "iconType",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "iconShowType",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "iconShowType",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"lib-link\" (click)=\"handleClick()\" [class.lib-link--alternative]=\"alternative\">\r\n  @if(selectIconsToShow() == 'left' || selectIconsToShow() == 'both' && iconLeft) {\r\n    <span class=\"lib-link__icon-left\">\r\n      <app-icon [iconName]=\"iconLeft ?? ''\" [size]=\"16\">\r\n      </app-icon>\r\n    </span>\r\n  }\r\n  <span class=\"lib-link__text\" [class.lib-link__text--silent]=\"silent\">{{text}}</span>\r\n  @if(selectIconsToShow() == 'right' || selectIconsToShow() == 'both' && iconRight) {\r\n    <span class=\"lib-link__icon-right\">\r\n      <app-icon [iconName]=\"iconRight ?? ''\" [size]=\"16\">\r\n      </app-icon>\r\n    </span>\r\n  }\r\n</div>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: #1ea7fd;\n  text-decoration: none;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #66bf3c;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "angularApp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new AngularNodeAppEngine()"
            },
            {
                "name": "app",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "express()"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n    provideHttpClient(),\r\n    provideClientHydration(withEventReplay())\r\n  ],\r\n}"
            },
            {
                "name": "bootstrap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => bootstrapApplication(AppComponent, config)"
            },
            {
                "name": "browserDistFolder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "resolve(serverDistFolder, '../browser')"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
            },
            {
                "name": "reqHandler",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createNodeRequestHandler(app)",
                "rawdescription": "The request handler used by the Angular CLI (dev-server and during build).",
                "description": "<p>The request handler used by the Angular CLI (dev-server and during build).</p>\n"
            },
            {
                "name": "serverConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideServerRendering(),\r\n    provideServerRoutesConfig(serverRoutes)\r\n  ]\r\n}"
            },
            {
                "name": "serverDistFolder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "dirname(fileURLToPath(import.meta.url))"
            },
            {
                "name": "serverRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.routes.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ServerRoute[]",
                "defaultValue": "[\r\n  {\r\n    path: '**',\r\n    renderMode: RenderMode.Prerender\r\n  }\r\n]"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "iconShowType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"left\" | \"right\" | \"both\" | \"any\"",
                "file": "src/app/lib/components/link/link.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [
            {
                "name": "InputType",
                "childs": [
                    {
                        "name": "TEXT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "text"
                    },
                    {
                        "name": "EMAIL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "email"
                    },
                    {
                        "name": "PASSWORD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "password"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/enums/input-type.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/server.ts": [
                {
                    "name": "angularApp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new AngularNodeAppEngine()"
                },
                {
                    "name": "app",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "express()"
                },
                {
                    "name": "browserDistFolder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "resolve(serverDistFolder, '../browser')"
                },
                {
                    "name": "reqHandler",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createNodeRequestHandler(app)",
                    "rawdescription": "The request handler used by the Angular CLI (dev-server and during build).",
                    "description": "<p>The request handler used by the Angular CLI (dev-server and during build).</p>\n"
                },
                {
                    "name": "serverDistFolder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "dirname(fileURLToPath(import.meta.url))"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n    provideHttpClient(),\r\n    provideClientHydration(withEventReplay())\r\n  ],\r\n}"
                }
            ],
            "src/main.server.ts": [
                {
                    "name": "bootstrap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => bootstrapApplication(AppComponent, config)"
                }
            ],
            "src/app/app.config.server.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
                },
                {
                    "name": "serverConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideServerRendering(),\r\n    provideServerRoutesConfig(serverRoutes)\r\n  ]\r\n}"
                }
            ],
            "src/app/app.routes.server.ts": [
                {
                    "name": "serverRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.routes.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ServerRoute[]",
                    "defaultValue": "[\r\n  {\r\n    path: '**',\r\n    renderMode: RenderMode.Prerender\r\n  }\r\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/enums/input-type.enum.ts": [
                {
                    "name": "InputType",
                    "childs": [
                        {
                            "name": "TEXT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "text"
                        },
                        {
                            "name": "EMAIL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "email"
                        },
                        {
                            "name": "PASSWORD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "password"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/enums/input-type.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/lib/components/link/link.component.ts": [
                {
                    "name": "iconShowType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"left\" | \"right\" | \"both\" | \"any\"",
                    "file": "src/app/lib/components/link/link.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 6,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.routes.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/lib/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/lib/components/calendar/calendar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CalendarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/lib/components/date-picker/components/date-picker-calendar-mobile/date-picker-calendar-mobile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatePickerCalendarMobileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/lib/components/date-picker/components/date-picker-calendar-mobile/date-picker-calendar-mobile.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "selectedDateStart",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/lib/components/date-picker/components/date-picker-input/date-picker-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatePickerInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/lib/components/date-picker/date-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatePickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/lib/components/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/lib/components/input-simple/input-simple.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputSimpleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/lib/components/link/link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/lib/components/link/link.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "iconShowType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/safe-html.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SafeHtmlPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/icon.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IconService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/main.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "angularApp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "browserDistFolder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reqHandler",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverDistFolder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/buttondefault.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonDefaultComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}